@page "/edit-game"
@page "/edit-game/{Id:int}"
@inject IVideoGameService VedioGameService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))


@if (Id is null)
{
    <PageTitle>Add New Video Game</PageTitle>
    <h3>Add New Video Game</h3>
}
else
{
    <PageTitle>Edit @CurrentGame.Title</PageTitle>
    <h3>Edit "@CurrentGame.Title"</h3>
}

<EditForm class="form-control" Model="CurrentGame" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="CurrentGame.Title" class="form-control"></InputText>
    </div>

    <div>
        <label for="publisher">Publisher</label>
        <InputText id="publisher" @bind-Value="CurrentGame.Publisher" class="form-control"></InputText>
    </div>

    <div>
        <label for="releaseYear">ReleaseYear</label>
        <InputText id="releaseYear" @bind-Value="CurrentGame.ReleaseYear" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    public VideoGame CurrentGame { get; set; } = new VideoGame();

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var game = await VedioGameService.GetVideoGameByIdAsync((int)Id);

            if (game is not null) CurrentGame = game;

        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await VedioGameService.AddGameAsync(CurrentGame);
        }
        else
        {
            await VedioGameService.UpdateVideoGameAsync(CurrentGame, (int)Id);
        }
        NavigationManager.NavigateTo("/games");

    }

}


