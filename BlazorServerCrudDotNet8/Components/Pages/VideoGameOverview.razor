@page "/games"
@inject IVideoGameService VedioGameService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<h3>VideoGameOverview</h3>

<PageTitle>Video Games</PageTitle>
@if (videoGames.Count == 0)
{
    <p><em>Loading Video Games...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Pbulisher</th>
                <th>Release Year</th>
                <th></th>
                <th></th>
            </tr>

        </thead>
        <tbody>
            @foreach (var game in videoGames)
            {
                <tr>
                    <td>@game.Title</td>
                    <td>@game.Publisher</td>
                    <td>@game.ReleaseYear</td>
                    <td><button class="btn btn-primary" @onclick="@(()=> EditGame(game.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="@(()=> DeleteGame(game.Id))">Delete</button></td>
                </tr>

            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="@(()=> AddGame())">Add New Game</button>
}


@code {
    List<VideoGame> videoGames = new List<VideoGame>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        videoGames = await VedioGameService.GetAllVideoGamesAsync();
    }

    void EditGame(int id)
    {
        NavigationManager.NavigateTo($"/edit-game/{id}");
    }

    async Task DeleteGame(int id)
    {
        await VedioGameService.DeleteGameAsync(id);
        videoGames = await VedioGameService.GetAllVideoGamesAsync();
    }

    void AddGame()
    {
        NavigationManager.NavigateTo("/edit-game");
    }
}
